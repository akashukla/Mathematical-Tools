load("modal-basis")$
load("recovery")$
load("nodal_operations/nodal_functions")$
load(stringproc)$
load("out-scripts")$

ndim : 3 $
polyOrder : 2$
/* Get nodes and nodal basis */
evNodes : getNodes("Ser", ndim, polyOrder)$
numCoeffs : length(evNodes)$
N2M : calcNodToModWithNodes("Ser", ndim, polyOrder, evNodes)$

calcModCoeff(gij) := float(
  N2M. transpose( makelist(gij[k] , k, 1, numCoeffs))
  )$


getStencilCoords(dimIn) := block([cD, dir, acI, bI, stencilLoc],
  /* Create a list with 3^dim elements. Each element is itself an dim-long
     list indicating whether the cell has a lower (=-1) or upper (=1)
     boundary, or no boundary (=0) in that direction. */
  cD         : 1,
  stencilLoc : [makelist(0,i,1,dimIn)],  /* Center stencil, all zeros. */
  for dir : 1 thru dimIn do (
    for acI : 1 thru 3^(dir-1) do (  /* Loop through cells already added to stencilLoc. */
      for bI : -1 thru 1 step 2 do (  /* Loop over lower and upper. */
        stencilLoc : append(stencilLoc, copylist([stencilLoc[acI]])),
        stencilLoc[length(stencilLoc)][dir] : bI
      )
    )
  ),
  return(stencilLoc)
)$


zc_all : [x,y,z]$
zc : makelist(zc_all[k],k,1,ndim)$

mkzlist(S,N) := makelist(S[i],i,0,N-1)$
/*x_zl will be an array indexed with [var, position] 
  order of vars is of course x,y,z
  oder of positions is [I, L, R, B, T]*/
/* Extra cells needed corresponds to number of 2*ndim*/


dirNames : [charlist("LIR"), charlist("BIT"), charlist("DIU")] $
for i : 1 thru ndim do (
  for j : 1 thru ndim do (
    for k : 1 thru 3 do (
      x_zl[i,j,k] : mkzlist(eval_string(concat("x",i,dirNames[j][k])), numCoeffs)
    )
  )
)$

newDirNames : charlist("ILRBTDU");
for i : 1 thru ndim do (
  for j : 1 thru 2*ndim+1 do (
      xList[i,j] : concat("x",i,newDirNames[j])
  )
)$

for i : 1 thru 2*ndim+1 do (
  xyzList[i] : concat("xyz",newDirNames[i])
)$

/* xp[1,2] means recovery of xp[1] in direction 2 */
/*x1I is expansion coeffs of X component of mapc2p, x2I is expansion coeffs of Y component*/
/* 5th argument is continuity*/
disp("doing recovery");
for i : 1 thru ndim do (
  for j : 1 thru ndim do (
    xp[i,j] : calcRecov1CellGen("Ser", zc[j], zc, polyOrder, 1, dg(x_zl[i,j,1]), dg(x_zl[i,j,2]), dg(x_zl[i,j,3]))
  )
)$

/* Compute the tangent vectors */
/* dxdz[i,j] = dx[i]/dz[j] */
disp("computing tangent vector");
for i : 1 thru ndim do (
  for j : 1 thru ndim do (
    dxdz[i,j] : diff(xp[i,j],zc[j])
  )
)$

sublist : makelist(makelist(zc[m] = evNodes[k][m], m,1,ndim),k,1,numCoeffs)$

numEvNodes : matrix_size(evNodes)[1]$

trimfloat(flt) := if abs(flt) < 1e-15 then 0 else flt $
flt(expr) := float(expand(expr))$

fName : sconcat("~/max-out/gij_calc_", "Ser_", ndim, "x_",  "p", polyOrder, ".cpp");
/*fh : openw("~/max-out/calc-gij.c")$*/
fh : openw(fName)$

printf(fh, "#include \"calc_gij_mod_decl.h\"~%~%");
printf(fh, "#include \<cmath\>~%~%");

printf(fh, "static inline double calc_metric(double dxdz[~a][~a], int i, int j) ~%", ndim, ndim)$
printf(fh, "{ double sum = 0;   for (int k=0; k<~a; ++k) sum += dxdz[k][i-1]*dxdz[k][j-1]; return sum; } ~%~%", ndim)$

printf(fh, "// some function signature ~%")$
/*printf(fh, "void gij_~ax_~a_p~a( const double *x1I, const double *x1L, const double *x1R, const double *x1B, const double *x1T, const double *x1D, const double *x1U, const double *x2I, const double *x2L, const double *x2R, const double *x2B, const double *x2T, const double *x2D, const double *x2U, const double *x3I, const double *x3L, const double *x3R, const double *x3B, const double *x3T, const double *x3D, const double *x3U, double *g11, double *g12, double *g13, double *g22, double *g23, double *g33) ~%{ ~%", ndim, Ser, polyOrder);*/

printf(fh, "void gij_~ax_~a_p~a( const double **xyz, double *gij) ~%{ ~%", ndim, Ser, polyOrder);

for i : 1 thru 2*ndim+1 do (
   printf(fh, "const double *xyz~a = xyz[~a];~%", newDirNames[i], i-1 )
)$

for i : 1 thru ndim do (
  for j : 1 thru 2*ndim+1 do (
    printf(fh, "const double *~a  = &~a[~a * ~a];~%", xList[i,j], xyzList[j], i-1, numCoeffs)
  )
)$


counter : 0;
for i : 1 thru ndim do (
  for j : i  thru ndim do (
    printf(fh, "double *g~a~a  = &gij[~a * ~a];~%", i,j, counter, numCoeffs),
    counter : counter + 1
  )
)$





printf(fh, "double g11_n[~a], g12_n[~a], g13_n[~a], g22_n[~a], g23_n[~a], g33_n[~a]; ~%",
  numEvNodes, numEvNodes, numEvNodes, numEvNodes, numEvNodes, numEvNodes)$

/* Compute tangent vectors at each node */
for n : 1 thru numEvNodes do (
  printf(fh, "do { ~%"),
  printf(fh, "  double dxdz[~a][~a]; ~%", ndim, ndim),
  for i : 1 thru ndim do (
    for j : 1 thru ndim do (
      printf(fh, "  dxdz[~a][~a] = ~a; ~%", i-1, j-1, flt(subst(sublist[n], dxdz[i,j])))
      )
    ),
  printf(fh, "  g11_n[~a] = calc_metric(dxdz, 1, 1); ~%", n-1),
  if ndim > 1 then printf(fh, "  g12_n[~a] = calc_metric(dxdz, 1, 2); ~%", n-1),
  if ndim > 2 then printf(fh, "  g13_n[~a] = calc_metric(dxdz, 1, 3); ~%", n-1),
  if ndim > 1 then printf(fh, "  g22_n[~a] = calc_metric(dxdz, 2, 2); ~%", n-1),
  if ndim > 2 then printf(fh, "  g23_n[~a] = calc_metric(dxdz, 2, 3); ~%", n-1),
  if ndim > 2 then printf(fh, "  g33_n[~a] = calc_metric(dxdz, 3, 3); ~%", n-1),
  printf(fh, " } while (0); ~%")
  )$

printf(fh, "// Convert nodal to modal for gij ~%")$

for i : 1 thru ndim do (
  for j : i thru ndim do (
    /*writeCExprs1(concat(g,i,j), calcModCoeff(concat(g,i,j,"_n"))),*/
    temp :  calcModCoeff(mkzlist(concat(g,i,j,"_n"),numCoeffs)),
    temp2 : makelist(temp[k][1],k,1,numCoeffs),
    writeCExprs1(concat(g,i,j), temp2),
    printf(fh, "~%")

  )
);

printf(fh, " ~%");
printf(fh, "}~%");
close(fh)$
